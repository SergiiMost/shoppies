[{"C:\\Coding\\React\\shoppies\\src\\index.js":"1","C:\\Coding\\React\\shoppies\\src\\App.js":"2","C:\\Coding\\React\\shoppies\\src\\components\\Navbar\\Navbar.js":"3","C:\\Coding\\React\\shoppies\\src\\components\\NominationsList\\NominationsList.js":"4","C:\\Coding\\React\\shoppies\\src\\components\\Footer\\Footer.js":"5","C:\\Coding\\React\\shoppies\\src\\utils\\debounce.js":"6","C:\\Coding\\React\\shoppies\\src\\components\\LoadingAnimation\\LoadingAnimation.js":"7","C:\\Coding\\React\\shoppies\\src\\components\\MovieCard\\MovieCard.js":"8","C:\\Coding\\React\\shoppies\\src\\components\\NominateButton\\NominateButton.js":"9","C:\\Coding\\React\\shoppies\\src\\components\\LoadingButton\\LoadingButton.js":"10","C:\\Coding\\React\\shoppies\\src\\components\\Nomination\\Nomination.js":"11","C:\\Coding\\React\\shoppies\\src\\components\\Overlay\\Overlay.js":"12","C:\\Coding\\React\\shoppies\\src\\components\\SuccessModal\\SuccessModal.js":"13","C:\\Coding\\React\\shoppies\\src\\components\\MovieInfo\\MovieInfo.js":"14"},{"size":215,"mtime":1608653560843,"results":"15","hashOfConfig":"16"},{"size":8373,"mtime":1610120752715,"results":"17","hashOfConfig":"16"},{"size":1193,"mtime":1608653482015,"results":"18","hashOfConfig":"16"},{"size":1698,"mtime":1609888896644,"results":"19","hashOfConfig":"16"},{"size":852,"mtime":1608677746945,"results":"20","hashOfConfig":"16"},{"size":195,"mtime":1608955344924,"results":"21","hashOfConfig":"16"},{"size":415,"mtime":1609175316338,"results":"22","hashOfConfig":"16"},{"size":1551,"mtime":1610120379162,"results":"23","hashOfConfig":"16"},{"size":1468,"mtime":1610048958341,"results":"24","hashOfConfig":"16"},{"size":341,"mtime":1609557682981,"results":"25","hashOfConfig":"16"},{"size":405,"mtime":1609888867226,"results":"26","hashOfConfig":"16"},{"size":340,"mtime":1609893796583,"results":"27","hashOfConfig":"16"},{"size":1195,"mtime":1610049017480,"results":"28","hashOfConfig":"16"},{"size":1319,"mtime":1610042313420,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"te39p8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Coding\\React\\shoppies\\src\\index.js",[],["62","63"],"C:\\Coding\\React\\shoppies\\src\\App.js",["64","65","66","67"],"import { useCallback, useEffect, useState, useRef } from 'react'\nimport debounce from './utils/debounce'\nimport Navbar from './components/Navbar/Navbar'\nimport NominationsList from './components/NominationsList/NominationsList'\nimport headerImage from './assets/svg/header_image.svg'\nimport Footer from './components/Footer/Footer'\nimport LoadingAnimation from './components/LoadingAnimation/LoadingAnimation'\nimport MovieCard from './components/MovieCard/MovieCard'\nimport LoadingButton from './components/LoadingButton/LoadingButton'\nimport Overlay from './components/Overlay/Overlay'\nimport SuccessModal from './components/SuccessModal/SuccessModal'\nimport MovieInfo from './components/MovieInfo/MovieInfo'\nimport { BiSearch } from 'react-icons/bi'\nimport styles from './App.module.scss'\n\nfunction App() {\n  const firstRender = useRef(true)\n  const [nominated, setNominated] = useState(JSON.parse(localStorage.getItem('nominated')) || {})\n  const [input, setInput] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [buttonLoading, setButtonLoading] = useState(false)\n  const [currentPage, setCurrentpage] = useState(1)\n  const [apiResponse, setApiResponse] = useState({})\n  const [movies, setMovies] = useState([])\n  const [showModal, setShowModal] = useState({ show: false, type: '' })\n  const [movieInfo, setMovieInfo] = useState({ id: null, info: '', loading: false })\n  const [fetchError, setFetchError] = useState(null)\n  let { totalResults, Error: error } = apiResponse\n\n  let numberOfPages = null\n  if (totalResults) numberOfPages = Math.ceil(apiResponse.totalResults / 10)\n\n  //Handle load more click when we have more than 10 movies\n  const handleLoadMoreButtonClick = () => {\n    setCurrentpage(currentPage + 1)\n  }\n\n  // Nominate a movie\n  const handleNominate = (obj) => {\n    setNominated({ ...nominated, ...obj })\n  }\n\n  // Remove a nomination\n  const handleRemoveNomination = (id) => {\n    let obj = { ...nominated }\n    delete obj[id]\n    setNominated(obj)\n  }\n\n  //hide overlay\n  const handleOverlayClick = () => {\n    setShowModal({ show: false, type: '' })\n    document.body.style.overflowY = 'auto'\n  }\n\n  // handle  a button click for more info about a movie\n  const handleMoreInfoClick = (id) => {\n    if (id === movieInfo.id) {\n      setMovieInfo({ ...movieInfo, id: id, loading: false })\n    } else {\n      setMovieInfo({ info: '', id: id, loading: true })\n    }\n  }\n\n  // debounced api request to prevent spamming the api with requests on each keystroke\n  // a request is fired only after 800ms of the last keystroke\n  const debouncedApiRequest = useCallback(\n    debounce(async (value) => {\n      if (value.trim() !== '') {\n        value = value.trim()\n        let url = `https://www.omdbapi.com/?s=${value}&apikey=eb8f90cf&page=${currentPage}&type=movie`\n        const res = await fetch(url).then((data) => data.json())\n        console.log(res)\n        setMovies(res.Search)\n        setCurrentpage(1)\n        setApiResponse(res)\n      }\n      setLoading(false)\n    }, 800),\n    []\n  )\n\n  //runs when the movie input changes\n  useEffect(() => {\n    const fireRequest = async () => {\n      setApiResponse({})\n      setMovies([])\n      if (input.trim() !== '') setLoading(true)\n      else setLoading(false)\n      try {\n        debouncedApiRequest(input)\n      } catch (err) {\n        setLoading(false)\n        setFetchError('Something went wrong. Try again later.')\n      }\n    }\n\n    fireRequest()\n  }, [input])\n\n  // runs when we change page from 1 -> 2 when we have more that 10 movies available\n  useEffect(() => {\n    const loadMore = async () => {\n      try {\n        if (currentPage > 1) {\n          setButtonLoading(true)\n          let url = `https://www.omdbapi.com/?s=${input}&apikey=eb8f90cf&page=${currentPage}&type=movie`\n          const res = await fetch(url).then((data) => data.json())\n          setMovies([...movies, ...res.Search])\n          setButtonLoading(false)\n        }\n      } catch (err) {\n        setButtonLoading(false)\n        setFetchError('Something went wrong. Try again later.')\n      }\n    }\n\n    loadMore()\n  }, [currentPage])\n\n  //displays a banner when all 5 movies were nominated\n  useEffect(() => {\n    localStorage.setItem('nominated', JSON.stringify(nominated))\n    if (firstRender.current !== true) {\n      if (Object.keys(nominated).length === 5) {\n        setShowModal({ show: true, type: 'success' })\n        document.body.style.overflowY = 'hidden'\n      }\n    }\n  }, [nominated])\n\n  //fetches data about individual movie, runs when a movie id has changed\n  useEffect(() => {\n    const loadMovieData = async () => {\n      if (movieInfo.id !== null) {\n        setShowModal({ show: true, type: 'movieInfo' })\n        document.body.style.overflowY = 'hidden'\n        try {\n          let url = `https://www.omdbapi.com/?i=${movieInfo.id}&apikey=eb8f90cf&type=movie`\n          const res = await fetch(url).then((data) => data.json())\n          setMovieInfo({ ...movieInfo, info: res, loading: false })\n        } catch (err) {\n          setMovieInfo({ id: null, info: '', loading: false })\n          setFetchError('Something went wrong. Try again later.')\n        }\n      }\n    }\n\n    loadMovieData()\n  }, [movieInfo.id])\n\n  // determine if first load\n  useEffect(() => {\n    firstRender.current = false\n  }, [])\n\n  return (\n    <>\n      <Navbar />\n      {showModal.show && (\n        <Overlay handleOverlayClick={handleOverlayClick}>\n          {showModal.type === 'success' ? (\n            <SuccessModal numberOfNominations={5} />\n          ) : (\n            <MovieInfo info={movieInfo.info} loading={movieInfo.loading} />\n          )}\n        </Overlay>\n      )}\n\n      <header className={styles.header}>\n        <div className={styles.headerContentWrapper}>\n          <div className={styles.headerTextWrapper}>\n            <h1 className={styles.headerMain}>Movie awards for entrepreneurs</h1>\n            <h2 className={styles.headerSecondary}>nominate your favorite movies for the upcoming Shoppies</h2>\n          </div>\n          <div className={styles.headerImageWrapper}>\n            <img className={styles.headerImage} src={headerImage} alt='2 people holding awards' />\n          </div>\n        </div>\n      </header>\n\n      <main className={styles.main}>\n        <div className={styles.mainContentWrapper}>\n          <NominationsList nominated={nominated} removeNomination={handleRemoveNomination} />\n          <div className={styles.moviesWrapper}>\n            <div className={styles.moviesInputWrapper}>\n              <label className={styles.moviesInputLabel}>Movie title</label>\n              <input\n                className={styles.moviesInput}\n                type='text'\n                id='title'\n                onChange={(e) => setInput(e.target.value)}\n                value={input}\n              ></input>\n              <BiSearch className={styles.moviesSearchIcon} color='#525158' size='16px' />\n            </div>\n            {loading && <LoadingAnimation />}\n            {error === 'Too many results.' ? <p>Too many results for the title \"{input}\".</p> : <p>{error}</p>}\n            <div className={styles.moviesContainer}>\n              {fetchError ? (\n                <p>{fetchError}</p>\n              ) : (\n                movies &&\n                movies.map((movie) => (\n                  <MovieCard\n                    title={movie.Title}\n                    year={movie.Year}\n                    imgsrc={movie.Poster}\n                    id={movie.imdbID}\n                    key={movie.imdbID}\n                    nominate={handleNominate}\n                    nominated={nominated[movie.imdbID] ? true : false}\n                    disableNominate={Object.keys(nominated).length >= 5 ? true : false}\n                    setShowModal={setShowModal}\n                    loadMovieData={handleMoreInfoClick}\n                  />\n                ))\n              )}\n            </div>\n            {currentPage < numberOfPages && (\n              <div className={styles.loadMore}>\n                <span className={styles.loadMoreData}>\n                  {currentPage * 10} / {totalResults} search results\n                </span>\n                <LoadingButton handleClick={handleLoadMoreButtonClick} loading={buttonLoading} />\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","C:\\Coding\\React\\shoppies\\src\\components\\Navbar\\Navbar.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\NominationsList\\NominationsList.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\Footer\\Footer.js",[],"C:\\Coding\\React\\shoppies\\src\\utils\\debounce.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\LoadingAnimation\\LoadingAnimation.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\MovieCard\\MovieCard.js",["68"],"import NominateButton from '../../components/NominateButton/NominateButton'\r\nimport p1 from '../../assets/svg/p1.svg'\r\nimport styles from './MovieCard.module.scss'\r\n\r\nconst MovieCard = ({ title, year, imgsrc, nominate, id, nominated, disableNominate, setShowModal, loadMovieData }) => {\r\n  if (imgsrc === 'N/A') imgsrc = p1\r\n\r\n  return (\r\n    <div className={styles.cardWrapper}>\r\n      <div className={styles.imageWrapper}>\r\n        <img src={imgsrc} className={styles.image} alt='image of a movie banner'></img>\r\n      </div>\r\n      <div className={styles.textWrapper}>\r\n        <div className={styles.cardInfoWrapper}>\r\n          <p className={`${styles.cardInfoItem} mb-05`}>\r\n            <span className={styles.cardInfoCategory}>Title:</span> <span className={styles.cardInfo}>{title}</span>\r\n          </p>\r\n          <p className={styles.cardInfoItem}>\r\n            <span className={styles.cardInfoCategory}>Year: </span>\r\n            <span className={styles.cardInfo}>{year}</span>\r\n          </p>\r\n        </div>\r\n        <div className={styles.cardButtonsWrapper}>\r\n          <NominateButton\r\n            nominate={nominate}\r\n            title={title}\r\n            year={year}\r\n            id={id}\r\n            nominated={nominated}\r\n            disableNominate={disableNominate}\r\n            setShowModal={setShowModal}\r\n          />\r\n          <button className={styles.moreInfo} onClick={() => loadMovieData(id)}>\r\n            More info\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieCard\r\n","C:\\Coding\\React\\shoppies\\src\\components\\NominateButton\\NominateButton.js",[],["69","70"],"C:\\Coding\\React\\shoppies\\src\\components\\LoadingButton\\LoadingButton.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\Nomination\\Nomination.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\Overlay\\Overlay.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\SuccessModal\\SuccessModal.js",[],"C:\\Coding\\React\\shoppies\\src\\components\\MovieInfo\\MovieInfo.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":67,"column":31,"nodeType":"77","endLine":67,"endColumn":42},{"ruleId":"75","severity":1,"message":"78","line":99,"column":6,"nodeType":"79","endLine":99,"endColumn":13,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":119,"column":6,"nodeType":"79","endLine":119,"endColumn":19,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":150,"column":6,"nodeType":"79","endLine":150,"endColumn":20,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":11,"column":9,"nodeType":"87","endLine":11,"endColumn":82},{"ruleId":"71","replacedBy":"88"},{"ruleId":"73","replacedBy":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","React Hook useEffect has a missing dependency: 'debouncedApiRequest'. Either include it or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has missing dependencies: 'input' and 'movies'. Either include them or remove the dependency array. You can also do a functional update 'setMovies(m => ...)' if you only need 'movies' in the 'setMovies' call.",["93"],"React Hook useEffect has a missing dependency: 'movieInfo'. Either include it or remove the dependency array. You can also do a functional update 'setMovieInfo(m => ...)' if you only need 'movieInfo' in the 'setMovieInfo' call.",["94"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["90"],["91"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [debouncedApiRequest, input]",{"range":"101","text":"102"},"Update the dependencies array to be: [currentPage, input, movies]",{"range":"103","text":"104"},"Update the dependencies array to be: [movieInfo, movieInfo.id]",{"range":"105","text":"106"},[3452,3459],"[debouncedApiRequest, input]",[4095,4108],"[currentPage, input, movies]",[5194,5208],"[movieInfo, movieInfo.id]"]